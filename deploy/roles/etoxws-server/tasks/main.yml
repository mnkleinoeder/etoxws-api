---
###############################################################################
# local variables
###############################################################################
- set_fact: etoxws_virtenv=/opt/virtualenv/{{ETOXWS_NAME}}
- set_fact: etoxws_pip={{etoxws_virtenv}}/bin/pip
- set_fact: etoxws_python={{etoxws_virtenv}}/bin/python
- set_fact: etoxws_celery={{etoxws_virtenv}}/bin/celery
- set_fact: etoxws_wsgi={{VHOST_CONF_DIR}}/{{ETOXWS_NAME}}.wsgi
- set_fact: etoxws_conf={{VHOST_CONF_DIR}}/{{ETOXWS_NAME}}.conf


###############################################################################
# OS dependent tasks
###############################################################################
- include: Ubuntu.yml
  when: ansible_distribution == "Ubuntu"

- include: CentOS.yml
  when: ansible_distribution == "CentOS"

###############################################################################
# setting up postgres
# we suppose that postgres has been installed already
# we just check that we have superuser access via sudo -u postgres
###############################################################################
#- lineinfile: dest={{postgres_main_conf}}
#    state=absent
#    regexp="^local.*md5$"
#  register: pg1
- lineinfile: dest={{postgres_main_conf}}
    line="local   all         all                                         md5"
    regexp="^local.*md5$"
  register: pg1
  
# order is important: next line must come before the md5 line
# otherwise 'sudo - postgres psql' fails
- name: remove peer line in order to trigger correct order
  lineinfile: dest={{postgres_main_conf}}
    regexp="^local.*peer$"
    state=absent
- lineinfile: dest={{postgres_main_conf}}
    line="local   all             postgres                                peer"
    regexp="^local.*peer$"
    insertbefore='^local.*md5$'
  register: pg2

- service: name={{postgres_service_name}} state=restarted
  when: pg1|changed or pg2|changed

- postgresql_db: name={{ETOXWS_NAME}}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
  sudo: yes
  sudo_user: postgres

- postgresql_user: db={{PG_DBNAME}} name={{PG_USERNAME}} password={{PG_PASSWD}}
  sudo: yes
  sudo_user: postgres

###############################################################################
# get the webapp code
###############################################################################
#    repo="/root/etoxws-api/"
#    repo="https://github.com/mnkleinoeder/etoxws-api.git"
- name: fetch code from github
  git: >
    repo="https://github.com/mnkleinoeder/etoxws-api.git"
    dest="{{ETOXWS_APPDIR}}"
  notify: reload apache

###############################################################################
# setting up the virtual env
###############################################################################
- file: path=/opt/virtualenv state=directory mode=755

- shell: virtualenv {{etoxws_virtenv}}
    creates={{etoxws_virtenv}}

- pip: requirements={{ETOXWS_APPDIR}}/src/etoxwsapi/req.pip
    executable={{etoxws_pip}}

- pip: name=argparse
    executable={{etoxws_pip}}
  when: ansible_distribution == "CentOS"

###############################################################################
# configuration of the webapp
###############################################################################

- template: src="setting_local.py.j2" dest={{ETOXWS_APPDIR}}/src/etoxwsapi/settings_local.py
- template: src="make_env.sh" dest={{ETOXWS_APPDIR}}/make_env.sh mode=644
- template: src="launch_celery.sh" dest={{ETOXWS_APPDIR}}/launch_celery.sh mode=755

- shell: . {{ETOXWS_APPDIR}}/make_env.sh && python manage.py syncdb --noinput
  register: r
  changed_when: not "Installed 0 object(s) from 0 fixture(s)" in r.stdout

###############################################################################
# enable the task management toolchain
###############################################################################

- service: name=rabbitmq-server state=started enabled=yes
- rabbitmq_vhost: name={{MQ_VHOST}} state=present
- rabbitmq_user: user={{MQ_USERNAME}}
                 password={{MQ_PASSWD}}
                 vhost={{MQ_VHOST}}
                 configure_priv=.*
                 read_priv=.*
                 write_priv=.*
                 state=present

#- group: name={{ETOXWS_NAME}} system=yes state=present
#- user: name={{ETOXWS_NAME}} group={{ETOXWS_NAME}} system=yes state=present

- file: path={{item}} state=directory
  with_items:
  - "{{supervisord_conf_dir}}"
  - "/var/log/celery"

#- ini_file: dest="{{supervisord_conf}}"
#            section=include
#            option=files
#            value="{{supervisord_conf_dir}}/*.conf"
#  register: cel1

# PyDev debugger support if not in production mode
# see: http://brianfisher.name/content/remote-debugging-python-eclipse-and-pydev
# and  http://pydev.org/manual_adv_remote_debugger.html
- set_fact: pydevd=""
  when: ETOXWS_PRODUCTION

- set_fact: pydevd=/opt/pydevd/pysrc
  when: not ETOXWS_PRODUCTION
- file: path=/opt/pydevd state=directory
- unarchive: src=pydevd.tgz dest=/opt/pydevd/
  when: not ETOXWS_PRODUCTION

- template: src="etoxws.celeryd.conf.j2" dest={{supervisord_conf_dir}}/{{ETOXWS_NAME}}.celeryd.conf mode=644
  register: cel

- supervisorctl: name={{ETOXWS_NAME}} state=restarted
  when: cel|changed

###############################################################################
# apache setup
###############################################################################

- template: src="etoxws.wsgi.py.j2" dest={{etoxws_wsgi}}
  notify: restart apache

- set_fact: _ssl=""
- template: src="etoxws.apache.conf.j2" dest={{etoxws_conf}}-nossl
  notify: restart apache

- set_fact: _ssl="-ssl"
- template: src="etoxws.apache.conf.j2" dest={{etoxws_conf}}-ssl
  notify: restart apache


